<?xml version="1.0" encoding="UTF-8"?>
<!-- (c) Copyright 2017 Hewlett Packard Enterprise Development LP Licensed 
	under the Apache License, Version 2.0 (the "License"); you may not use this 
	file except in compliance with the License. You may obtain a copy of the 
	License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by 
	applicable law or agreed to in writing, software distributed under the License 
	is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
	KIND, either express or implied. See the License for the specific language 
	governing permissions and limitations under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.hpe.labs.loom</groupId>
	<artifactId>docker-adapter</artifactId>
	<version>1.1-SNAPSHOT</version>
	<name>Loom Docker Integration</name>
	<packaging>jar</packaging>
	<organization>
		<name>Hewlett Packard Labs, Bristol, UK</name>
	</organization>
	<scm>
		<connection>scm:git:https://github.com/HewlettPackard/loom-docker-adapter.git</connection>
		<url>https://github.com/HewlettPackard/loom-docker</url>
	</scm>

	<properties>
		<loom-version>3.11-SNAPSHOT</loom-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<jacoco.version>0.7.6.201602180812</jacoco.version>

		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
		<maven-clean-plugin.version>3.0.0</maven-clean-plugin.version>
		<maven-jar-plugin.version>2.4</maven-jar-plugin.version>
		<maven-dependency-plugin.version>2.3</maven-dependency-plugin.version>
		<maven-checkstyle-plugin.version>2.15</maven-checkstyle-plugin.version>
		<checkstyle.config.location>config/checkstyle-adapters.xml</checkstyle.config.location>
	</properties>

	<dependencies>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>jsr305</artifactId>
			<version>3.0.2</version>
		</dependency>
		
		<dependency>
			<groupId>com.spotify</groupId>
			<artifactId>docker-client</artifactId>
			<version>8.9.1</version>
		</dependency>

		<dependency>
			<groupId>com.hp.hpl.loom</groupId>
			<artifactId>loom-common</artifactId>
			<version>${loom-version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.hp.hpl.loom</groupId>
			<artifactId>loom-adapter</artifactId>
			<version>${loom-version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Added for OS extraction support -->
		<dependency>
			<groupId>com.jcraft</groupId>
			<artifactId>jsch</artifactId>
			<version>0.1.53</version>
		</dependency>
	</dependencies>

	<pluginRepositories>
		<pluginRepository>
			<id>central</id>
			<name>Central Repository</name>
			<url>http://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<finalName>docker-adapter</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven-checkstyle-plugin.version}</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<!-- TODO: Change for true -->
							<failOnViolation>true</failOnViolation>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Solves maven symbol compilation bug -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib</classpathPrefix>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version} (${buildNumber})</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
					<revisionOnScmFailure>CannotAccessSCM</revisionOnScmFailure>
					<shortRevisionLength>8</shortRevisionLength>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>

				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/${project.artifactId}-jacoco.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>

					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/${project.artifactId}-jacoco.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Marco Lotz: Adds docker API dependency to Uber Jar -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<!-- Run shade goal on package phase -->
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<createDependencyReducedPom>false</createDependencyReducedPom>
							<filters>
								<filter>
									<artifact>com.spotify:docker-client</artifact>
									<includes>
										<include>com/spotify/docker/**</include>
									</includes>
								</filter>
								<filter>
									<!-- The above configuration filters all files in META-INF ending 
										with .SF, .DSA, and .RSA for all artifacts (*:*) when creating uber-jar file. 
										The reason java.lang.SecurityException is raised is because some dependency 
										jar files are signed jar files. A jar file is signed by using jarsigner, 
										which creates 2 additional files and places them in META-INF: -->
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
